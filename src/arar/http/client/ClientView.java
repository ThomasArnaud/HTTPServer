package arar.http.client;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.JFileChooser;

/**
 * @author Thomas Arnaud, Bruno Buiret, Sydney Adjou
 */
public class ClientView extends javax.swing.JFrame
{
    /**
     * Creates new form ClientView_
     */
    public ClientView()
    {
        initComponents();
        this.executor = Executors.newFixedThreadPool(1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        serverAddress = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        serverPort = new javax.swing.JSpinner();
        serverPort.setModel(new javax.swing.SpinnerNumberModel(80, 1, 65535, 1));
        jLabel3 = new javax.swing.JLabel();
        remoteFilePath = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        localFilePath = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        clearLogButton = new javax.swing.JButton();
        sendRequestButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Client HTTP");
        setMinimumSize(new java.awt.Dimension(500, 300));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        java.awt.GridBagLayout jPanel1Layout = new java.awt.GridBagLayout();
        jPanel1Layout.columnWidths = new int[] {0, 5, 0, 5, 0};
        jPanel1Layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        jPanel1.setLayout(jPanel1Layout);

        jLabel1.setText("Adresse du serveur");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        jPanel1.add(serverAddress, gridBagConstraints);

        jLabel2.setText("Port du serveur");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(serverPort, gridBagConstraints);

        jLabel3.setText("Chemin du fichier distant");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(remoteFilePath, gridBagConstraints);

        jLabel4.setText("Chemin du fichier local");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        jPanel1.add(localFilePath, gridBagConstraints);

        browseButton.setText("Parcourir");
        browseButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                browseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(browseButton, gridBagConstraints);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        clearLogButton.setText("Effacer l'historique");
        clearLogButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clearLogButtonActionPerformed(evt);
            }
        });
        jPanel4.add(clearLogButton);

        sendRequestButton.setText("Envoyer");
        sendRequestButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                sendRequestButtonActionPerformed(evt);
            }
        });
        jPanel4.add(sendRequestButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jPanel4, gridBagConstraints);

        logTextArea.setEditable(false);
        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        jScrollPane1.setViewportView(logTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanel1.add(jScrollPane1, gridBagConstraints);

        jTabbedPane1.addTab("GET", jPanel1);

        getContentPane().add(jTabbedPane1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_browseButtonActionPerformed
    {//GEN-HEADEREND:event_browseButtonActionPerformed
        JFileChooser fileDialog = new JFileChooser();
        fileDialog.setDialogTitle("Emplacement du fichier local");
        fileDialog.setDialogType(JFileChooser.CUSTOM_DIALOG);
        fileDialog.setApproveButtonText("Sélectionner");

        if(fileDialog.showDialog(this, null) == JFileChooser.APPROVE_OPTION)
        this.localFilePath.setText(fileDialog.getSelectedFile().getPath());
    }//GEN-LAST:event_browseButtonActionPerformed

    private void clearLogButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearLogButtonActionPerformed
    {//GEN-HEADEREND:event_clearLogButtonActionPerformed
        this.logTextArea.setText(null);
    }//GEN-LAST:event_clearLogButtonActionPerformed

    private void sendRequestButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_sendRequestButtonActionPerformed
    {//GEN-HEADEREND:event_sendRequestButtonActionPerformed
        ClientView that = this;

        this.executor.execute(() ->
            {
                if(!that.serverAddress.getText().isEmpty())
                {
                    if(!that.remoteFilePath.getText().isEmpty())
                    {
                        if(!that.localFilePath.getText().isEmpty())
                        {
                            try
                            {
                                int statusCode;

                                that.sendRequestButton.setEnabled(false);
                                that.logTextArea.append("Téléchargement en cours.\n");

                                switch(statusCode = HTTPClient.get(
                                    that.remoteFilePath.getText(),
                                    that.localFilePath.getText(),
                                    InetAddress.getByName(that.serverAddress.getText()),
                                    (int) that.serverPort.getValue()
                                ))
                                {
                                    case HTTPClient.SUCCESS:
                                    that.logTextArea.append("Téléchargement de \"" + that.remoteFilePath.getText() + "\" terminé avec succès.\n");
                                    break;

                                    case HTTPClient.ERROR_FILE_ALREADY_EXISTS:
                                    that.logTextArea.append("Le fichier local existe déjà.\n");
                                    break;

                                    case HTTPClient.ERROR_SOCKET:
                                    that.logTextArea.append("Erreur lors de la communication réseau.\n");
                                    break;

                                    case HTTPClient.ERROR_IO:
                                    that.logTextArea.append("Erreur lors de l'écriture du fichier local.\n");
                                    break;

                                    default:
                                    that.logTextArea.append("Erreur du serveur HTTP : " + statusCode + ".\n");
                                }
                            }
                            catch(UnknownHostException e)
                            {

                            }
                            finally
                            {
                                that.sendRequestButton.setEnabled(true);
                            }
                        }
                        else
                        {
                            this.logTextArea.append("Aucun emplacement local renseigné.");
                        }
                    }
                    else
                    {
                        this.logTextArea.append("Aucune ressource distante demandée.\n");
                    }
                }
                else
                {
                    this.logTextArea.append("Adresse du serveur non renseignée.\n");
                }
            });
    }//GEN-LAST:event_sendRequestButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JButton clearLogButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField localFilePath;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JTextField remoteFilePath;
    private javax.swing.JButton sendRequestButton;
    private javax.swing.JTextField serverAddress;
    private javax.swing.JSpinner serverPort;
    // End of variables declaration//GEN-END:variables
    private ExecutorService executor;
}
